include_guard(GLOBAL)

function(get_target_libraries out target)
    get_target_property(raw_libraries ${target} LINK_LIBRARIES)
    set(result "")
    foreach(raw_lib IN LISTS raw_libraries)
        get_target_property(lib ${raw_lib} ALIASED_TARGET)

        if (lib STREQUAL "lib-NOTFOUND")
            list(APPEND result ${raw_lib})
        else()
            get_target_property(lib_type ${lib} TYPE)
            if (NOT ${lib_type} STREQUAL "INTERFACE_LIBRARY")
                list(APPEND result ${lib})
            endif()
        endif()
    endforeach()
    set(${out} ${result} PARENT_SCOPE)
endfunction()

function(target_add_sanitizer target)
    cmake_parse_arguments(ARG "" "" "SANITIZERS" ${ARGN})
    if (NOT ARG_SANITIZERS)
        message(FATAL_ERROR "Please select sanitizers that will be enabled for target '${target}'")
        return()
    endif()

    cmake_parse_arguments(sanitizers "Address;UndefinedBehavior" "" "" ${ARG_SANITIZERS})

    if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
        get_target_libraries(libraries ${target})
        if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
            if (sanitizers_Address)
                set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_OPTIONS /fsanitize=address)
                target_link_options(${target} PRIVATE /INCREMENTAL:NO)
            endif()
            return()
        elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
            if (sanitizers_Address)
                set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_OPTIONS /fsanitize=address)
                set_target_properties(${target} ${libraries} PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded")
                set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_DEFINITIONS _DISABLE_STRING_ANNOTATION _DISABLE_VECTOR_ANNOTATION)
                target_link_libraries(${target} PRIVATE clang_rt.asan_dynamic-x86_64.lib clang_rt.asan_dynamic_runtime_thunk-x86_64.lib)
            endif()
            return()
        elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
            set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_DEFINITIONS _DISABLE_STRING_ANNOTATION _DISABLE_VECTOR_ANNOTATION)
            target_link_options(${target} PRIVATE -coverage)
            if (sanitizers_Address)
                set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_OPTIONS -fsanitize=address)
                target_link_options(${target} PRIVATE -fsanitize=address)
            endif()
            if (sanitizers_UndefinedBehavior)
                set_property(TARGET ${target} ${libraries} APPEND PROPERTY COMPILE_OPTIONS -fsanitize=undefined)
                target_link_options(${target} PRIVATE -fsanitize=undefined)
            endif()
            set_target_properties(${target} ${libraries} PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded")
            return()
        endif()
    endif()
    if (sanitizers_Address)
        target_compile_options(${target} PRIVATE -fsanitize=address)
        target_link_options(${target} PRIVATE -fsanitize=address)
    endif()
    if (sanitizers_UndefinedBehavior)
        target_compile_options(${target} PRIVATE -fsanitize=undefined)
        target_link_options(${target} PRIVATE -fsanitize=undefined)
    endif()
endfunction()
